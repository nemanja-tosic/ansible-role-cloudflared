# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/deployment-guides/ansible/#5-create-the-ansible-playbook
---
- name: Install cloudflared
  tags:
    - cloudflared
    - cloudflared_install
  block:
    - name: Check if cloudflared installed
      shell: which cloudflared
      register: command_result
      failed_when: false
      changed_when: false

    - name: Download the cloudflared Linux package
      get_url:
        url: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386
        dest: /usr/local/bin/cloudflared
        mode: 0755
      when: command_result.rc != 0

- name: Set up tunnel
  tags:
    - cloudflared
    - cloudflared_create_tunnel
  block:
    # https://developers.cloudflare.com/api/operations/cloudflare-tunnel-get-a-cloudflare-tunnel
    - name: Get tunnel data
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflared_tunnel_credentials.account_tag }}/cfd_tunnel?name={{ cloudflared_tunnel_name }}&is_deleted=false"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflared_tunnel_credentials.api_token }}"
        status_code: 200
      register: cloudflared_tunnel_get

    - name: Extract tunnel id from get response
      set_fact:
        cloudflared_tunnel_id: "{{ cloudflared_tunnel_get.json.result[0].id }}"
      when: cloudflared_tunnel_get.json.result[0] is defined

    # https://developers.cloudflare.com/api/operations/cloudflare-tunnel-create-a-cloudflare-tunnel
    - name: Create tunnel
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflared_tunnel_credentials.account_tag }}/cfd_tunnel"
        method: POST
        headers:
          Authorization: "Bearer {{ cloudflared_tunnel_credentials.api_token }}"
        body:
          name: "{{ cloudflared_tunnel_name }}"
          tunnel_secret: "{{ cloudflared_tunnel_credentials.secret }}"
          config_src: local
        body_format: json
        status_code: 200
      register: cloudflared_tunnel_setup
      when: cloudflared_tunnel_id is not defined

    - name: Extract tunnel id from create response
      set_fact:
        cloudflared_tunnel_id: "{{ cloudflared_tunnel_setup.json.result.id }}"
      when: cloudflared_tunnel_id is not defined

    - name: Create cloudflared config directory
      become: yes
      file:
        path: "{{ cloudflared_config_dir }}"
        state: directory
        mode: 0755
        recurse: yes

    - name: Create the config
      ansible.builtin.template:
        src: config.yml.j2
        dest: "{{ cloudflared_config_file }}"
        force: no
      notify: Restart cloudflared

    - name: Create the tunnel credentials file for cloudflared.
      copy:
        dest: "{{ cloudflared_config_dir }}/cert-{{ cloudflared_tunnel_id }}.json"
        content: |
          {
            "AccountTag"   : "{{ cloudflared_tunnel_credentials.account_tag | quote }}",
            "TunnelID"     : "{{ cloudflared_tunnel_id | quote }}",
            "TunnelName"   : "{{ cloudflared_tunnel_name | quote }}",
            "TunnelSecret" : "{{ cloudflared_tunnel_credentials.secret | quote }}"
          }

- name: Set up public hostnames
  tags:
    - cloudflared
    - cloudflared_public_hostnames
  block:
    - ansible.builtin.include_tasks:
        file: dns.yml
      when: cloudflared_tunnel_dns_setup is true

- name: Set up private networks
  tags:
    - cloudflared
    - cloudflared_private_networks
  block:
    - ansible.builtin.include_tasks:
        file: routes.yml
      when: cloudflared_tunnel_routes_setup is true

- name: Install service
  tags:
    - cloudflared
  block:
    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: Install cloudflared as a systemd service
      shell: cloudflared service install
      when: not 'cloudflared.service' in services

    - name: Update cloudflared update timer
      ansible.builtin.systemd:
        name: cloudflared-update.timer
        state: started
        enabled: true
